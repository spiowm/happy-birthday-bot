from aiogram import Router, F, types, Bot
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
# from bot.utils.gemini_api import generate_wish
from typing import List, Optional
from . import keyboards

router = Router()

from config import Config
from google import genai


class Question:
    def __init__(self, question_id: str, question: str, answer: str = None):
        self.question_id = question_id
        self.question_text = question
        self.answer_text = answer


async def generate_wish(questions: List[Question]) -> (str, str):
    """Generate personalized greeting using Gemini API."""
    questions_text = "\n".join(
        f"–ü–∏—Ç–∞–Ω–Ω—è: {q.question_text}\n–í—ñ–¥–ø–æ–≤—ñ–¥—å: {q.answer_text}"
        for q in questions
    )

    prompt = f"""–¢–∏ - –∫—Ä–µ–∞—Ç–∏–≤–Ω–∏–π –ø–∏—Å—å–º–µ–Ω–Ω–∏–∫, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫—ñ —ñ—Å—Ç–æ—Ä—ñ—ó-–ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è. 
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –Ω–∏–∂—á–µ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–µ, –≤–µ—Å–µ–ª–µ —Ç–∞ –Ω–∞–¥–∏—Ö–∞—é—á–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è:
–ü–∏—Ç–∞–Ω–Ω—è: –Ø–∫ –∑–≤–∞—Ç–∏?
–í—ñ–¥–ø–æ–≤—ñ–¥—å: –î–µ–Ω–∏—Å
{questions_text}

–í–∫–∞–∑—ñ–≤–∫–∏ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó:
1. –°—Ç–≤–æ—Ä–∏ –∑–∞—Ö–æ–ø–ª—é—é—á—É —ñ—Å—Ç–æ—Ä—ñ—é (–¥–æ–≤–∂–∏–Ω–æ—é 1500-2000 —Å–∏–º–≤–æ–ª—ñ–≤), —è–∫–∞ –ø–µ—Ä–µ–ø–ª—ñ—Ç–∞—î –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.
2. –î–æ–¥–∞–π —Ç–µ—Ö–Ω—ñ—á–Ω–∏–π –≥—É–º–æ—Ä —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫—ñ –∂–∞—Ä—Ç–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ –∑ –Ω–∞–¥–∞–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é.
3. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—É—á–∞—Å–Ω—ñ –µ–º–æ–¥–∑—ñ –¥–æ—Ä–µ—á–Ω–æ (3-5 –µ–º–æ–¥–∑—ñ –Ω–∞ –∞–±–∑–∞—Ü).
4. –ó—Ä–æ–±–∏ —ñ—Å—Ç–æ—Ä—ñ—é –¥–∏–Ω–∞–º—ñ—á–Ω–æ—é - –∑ –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–∏–º–∏ –ø–æ–≤–æ—Ä–æ—Ç–∞–º–∏, –º–æ–∂–ª–∏–≤–æ, –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ –æ–±—Ä–∞–Ω–æ–≥–æ —Å—Ç–∏–ª—é —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ.
5. –í–∫–ª—é—á–∏ –≤—ñ–¥—Å–∏–ª–∫–∏ –¥–æ —Å—É—á–∞—Å–Ω–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π, –®–Ü —Ç–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.
6. –ó–∞–≤–µ—Ä—à–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ—Ç—É–∂–Ω–∏–º –ø–æ–±–∞–∂–∞–Ω–Ω—è–º, —è–∫–µ –ø–æ—î–¥–Ω—É—î –æ—Å–æ–±–∏—Å—Ç—ñ –¥–µ—Ç–∞–ª—ñ –∑ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫–æ—é —Ç–µ–º–∞—Ç–∏–∫–æ—é.

–°—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è:
- –î—Ä—É–∂–Ω—ñ–π —Ç–∞ –µ–Ω–µ—Ä–≥—ñ–π–Ω–∏–π —Ç–æ–Ω
- –ö–æ—Ä–æ—Ç–∫—ñ, –¥–∏–Ω–∞–º—ñ—á–Ω—ñ —Ä–µ—á–µ–Ω–Ω—è
- –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–µ—Ç–∞–ª—ñ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –º–µ—Ç–∞—Ñ–æ—Ä
- –î–æ–¥–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ —Å–∞–º–æ—ñ—Ä–æ–Ω—ñ—ó —Ç–∞ –¥–æ–±—Ä–∏—Ö –∂–∞—Ä—Ç—ñ–≤ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è

–ü—Ä–∏–∫–ª–∞–¥ —Ñ—Ä–∞–∑–∏-–∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: "–ù–µ—Ö–∞–π —Ç–≤—ñ–π –∫–æ–¥ –∑–∞–≤–∂–¥–∏ –±—É–¥–µ –±–µ–∑ –±–∞–≥—ñ–≤, –∞ –∂–∏—Ç—Ç—è ‚Äî –∑ –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–º–∏ —Ü–∏–∫–ª–∞–º–∏ —â–∞—Å—Ç—è! üéÇüíª"  
"""
    # –°—Ç–≤–æ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è-–ø—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç—Å—å–∫—É —ñ—Å—Ç–æ—Ä—ñ—é. –Ü—Å—Ç–æ—Ä—ñ—è –º–∞—î –±—É—Ç–∏ –≤–µ—Å–µ–ª–æ—é, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—é —Ç–∞ –º—ñ—Å—Ç–∏—Ç–∏
    # –∂–∞—Ä—Ç—ñ–≤–ª–∏–≤—ñ –≤—ñ–¥—Å–∏–ª–∫–∏ –¥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ–π —ñ –Ω–∞–≤—ñ—Ç—å —à—Ç—É—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É. –¢–∞–∫–æ–∂ –¥–æ–¥–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ –≤–ª—É—á–Ω–∏—Ö —Å–º–∞–π–ª–∏–∫—ñ–≤.
    # –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –Ω–∞–¥–∏—Ö–∞—é—á–∏–º —ñ —â–∏—Ä–∏–º.

    try:
        client = genai.Client(api_key=Config.GEMINI_API_KEY)
        response = client.models.generate_content(
            model=Config.MODEL,
            contents=prompt
        )
        return prompt, response.text
    except Exception as e:
        return prompt, f"–ù–∞ –∂–∞–ª—å, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ. –ü–æ–º–∏–ª–∫–∞: {str(e)}"


# –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω–∏ —è–∫ –∫–ª–∞—Å
class QuestionnaireStates(StatesGroup):
    favorite_language = State()
    dream_location = State()
    favorite_movie = State()
    favorite_game = State()
    coding_place = State()
    genre = State()


QUESTIONS = [
    Question('favorite_language', 'üõ† –Ø–∫–∞ –º–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è –ø—Ä–∏–Ω–æ—Å–∏—Ç—å —Ç–æ–±—ñ –Ω–∞–π–±—ñ–ª—å—à–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–Ω—è?'),
    Question('dream_location', 'üåç –ù–∞–∑–≤–∏ –º—ñ—Å—Ü–µ, –¥–µ —Ç–∏ —Ö–æ—Ç—ñ–≤ –±–∏ –ø—Ä–æ–∫–∏–Ω—É—Ç–∏—Å—è –∑–∞–≤—Ç—Ä–∞ –≤—Ä–∞–Ω—Ü—ñ?'),
    Question('favorite_movie', 'üé• –ó —è–∫–∏–º –≥–µ—Ä–æ—î–º —Ñ—ñ–ª—å–º—É —Ç–∏ —Å–µ–±–µ –Ω–∞–π–±—ñ–ª—å—à–µ –∞—Å–æ—Ü—ñ—é—î—à?'),
    Question('favorite_game', 'üéÆ –ß–∏–º —Ç–∏ –ª—é–±–∏—à –∑–∞–π–º–∞—Ç–∏—Å—è, –∫–æ–ª–∏ —Ö–æ—á–µ—à –≤—ñ–¥–ø–æ—á–∏—Ç–∏ –≤—ñ–¥ —É—Å—å–æ–≥–æ?'),
    Question('coding_place', 'üåà –î–µ —Ç–∏ –Ω–∞–π–±—ñ–ª—å—à–µ –ª—é–±–∏—à –∫–æ–¥–∏—Ç–∏? \n(–ó–∞—Ç–∏—à–Ω–∞ –∫–∞–≤\'—è—Ä–Ω—è, –æ—Ñ—ñ—Å –∑ –∫–æ–º–∞–Ω–¥–æ—é, –¥–æ–º–∞—à–Ω—ñ–π setup –∑ –∫–æ—Ç–æ–º –Ω–∞ –∫–æ–ª—ñ–Ω–∞—Ö, —á–∏ –º–æ–∂–µ –∫–æ—Å–º—ñ—á–Ω–∞ —Å—Ç–∞–Ω—Ü—ñ—è?)'),
    Question('genre', 'üé¨ –í —è–∫–æ–º—É —Å—Ç–∏–ª—ñ —Ç–∏ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–≤–æ—î –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è? \n(–ï–ø—ñ—á–Ω–µ —Ñ–µ–Ω—Ç–µ–∑—ñ, –∫—ñ–±–µ—Ä–ø–∞–Ω–∫, –∫–æ–º–µ–¥—ñ—è, –Ω–∞–¥–∏—Ö–∞—é—á–∞ —ñ—Å—Ç–æ—Ä—ñ—è —É—Å–ø—ñ—Ö—É —á–∏, –º–æ–∂–µ, —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞ –¥—Ä–∞–º–∞ –∑ –±–∞–≥–∞–º–∏ –≤ –≥–æ–ª–æ–≤–Ω—ñ–π —Ä–æ–ª—ñ?)')
]


@router.callback_query(F.data == "questionnaire__start")
async def start_questionnaire(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–µ—Ä—à–∏–π —Å—Ç–∞–Ω
    await state.set_state(QuestionnaireStates.favorite_language)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–µ—Ä—à–µ –ø–∏—Ç–∞–Ω–Ω—è
    await callback_query.message.answer(text=QUESTIONS[0].question_text)
    await callback_query.answer()


@router.message(QuestionnaireStates.favorite_language)
async def process_favorite_language(message: types.Message, state: FSMContext):
    await state.update_data(favorite_language=message.text)
    await state.set_state(QuestionnaireStates.dream_location)
    await message.answer(QUESTIONS[1].question_text)


@router.message(QuestionnaireStates.dream_location)
async def process_dream_location(message: types.Message, state: FSMContext):
    await state.update_data(dream_location=message.text)
    await state.set_state(QuestionnaireStates.favorite_movie)
    await message.answer(QUESTIONS[2].question_text)


@router.message(QuestionnaireStates.favorite_movie)
async def process_favorite_movie(message: types.Message, state: FSMContext):
    await state.update_data(favorite_movie=message.text)
    await state.set_state(QuestionnaireStates.favorite_game)
    await message.answer(QUESTIONS[3].question_text)


@router.message(QuestionnaireStates.favorite_game)
async def process_favorite_food(message: types.Message, state: FSMContext):
    await state.update_data(favorite_game=message.text)
    await state.set_state(QuestionnaireStates.coding_place)
    await message.answer(QUESTIONS[4].question_text)


@router.message(QuestionnaireStates.coding_place)
async def process_last_task(message: types.Message, state: FSMContext):
    await state.update_data(coding_place=message.text)
    await state.set_state(QuestionnaireStates.genre)
    await message.answer(QUESTIONS[5].question_text)


@router.message(QuestionnaireStates.genre)
async def process_genre(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(genre=message.text)
    data = await state.get_data()
    await state.clear()
    # Update questions with answers
    questions = list(QUESTIONS)  # Create a copy to modify
    for question in questions:
        question.answer_text = data.get(question.question_id, "–ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ")

    # Generate and send the wish
    await message.answer("üé® –ì–µ–Ω–µ—Ä—É—é –≤–∞—à–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è...")
    prompt, wish_text = await generate_wish(questions)

    await message.answer(
        text=wish_text,
        parse_mode="Markdown",
        reply_markup=keyboards.again
    )

    try:
        await bot.send_message(
            chat_id=str(Config.ADMIN_TG_ID),
            text=prompt,
            parse_mode="Markdown",

        )
    except Exception as e:
        print(e)

    try:
        await bot.send_message(
            chat_id=str(Config.ADMIN_TG_ID),
            text=wish_text,
            parse_mode="Markdown",

        )
    except Exception as e:
        print(e)
